// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  name      String?  @default("Example")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  adminId           String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin             Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  adminId      String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin        Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String?      @unique
  type          String?
  phone         String?
  password      String
  emailVerified Boolean?     @default(false)
  verifyId      String?      @unique
  verification  VerificationToken? @relation(fields: [verifyId], references: [id])
  image         String?
  jobRole       String?
  category      String?
  company       Company?     @relation(fields: [companyId], references: [id])
  companyId     String?
  accounts      Account[]     
  sessions      Session[]
  invitations   Invitation[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  admin      Admin[]  
  user       User[]

  @@unique([id, token])
}

model Admin {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  phone         String?
  password      String
  emailVerified Boolean?      @default(false)
  verifyId      String?       @unique
  verification  VerificationToken?  @relation(fields: [verifyId], references: [id], onDelete: Cascade)
  image         String?
  jobRole       String?
  category      String?
  type          String?
  company       Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String?
  accounts      Account[]
  sessions      Session[]
  invitations   Invitation[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Company {
  id           String         @id @default(cuid())
  companyName  String
  companyEmail String         @unique
  companyPhone String?
  country      String?
  address      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  users        User[]
  admins       Admin[]
  invitations  Invitation[]
}

model Invitation {
  id          String          @id @default(cuid())
  email       String          @unique
  description String?
  token       String          @unique
  category    String
  expires     DateTime?
  adminId     String?
  companyId   String?
  userId      String?
  user        User?           @relation(fields: [userId], references: [id])
  company     Company?        @relation(fields: [companyId], references: [id])
  admin       Admin?          @relation(fields: [adminId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Employee {
  id          String          @id @default(cuid())
  name        String
  email       String          @unique
  department  String
  jobRole     String  
  salary      String
  signBonus   String
  status      Boolean?
  payrollId   String?
  payroll     Payroll?        @relation(fields: [payrollId], references: [id])
}

model Contractor {
  id          String          @id @default(cuid())
  name        String
  email       String          @unique
  department  String
  jobRole     String  
  salary      String
  signBonus   String
  status      Boolean?
  payrollId   String?
  payroll     Payroll?        @relation(fields: [payrollId], references: [id])

}

model Payroll {
  id          String          @id @default(cuid())
  title       String
  cycle       String
  payday      DateTime
  auto        Boolean
  burden      Int
  currency    String
  employees   Employee[]
  contractors Contractor[]

}


