// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// learn more https://www.npmjs.com/package/prisma-zod-generator
// generator zod {
//   provider = "prisma-zod-generator"
//   output   = "./zod"
// }

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  name      String?  @default("Example")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  adminId           String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  adminId      String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum PayrollMethod {
  CRYPTO
  BANK
  MOBILEMONEY
}

model User {
  id            String             @id @default(cuid())
  firstName     String
  lastName      String
  email         String             @unique
  phone         String?
  password      String
  type          Role               @default(USER)
  emailVerified Boolean?           @default(false)
  verification  VerificationToken?
  image         String?
  jobRole       String?
  category      String?
  company       Company?           @relation(fields: [companyId], references: [id])
  companyId     String?
  accounts      Account[]
  sessions      Session[]
  invitations   Invitation[]
  paymentLinks  PaymentLink[]
  wyreRequests  WyreRequest[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String
  expires DateTime
  userId  String   @unique
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, token])
}

model Company {
  id           String       @id @default(cuid())
  companyName  String
  companyEmail String       @unique
  companyPhone String?
  country      String?
  address      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  users        User[]
  invitations  Invitation[]
}

model Invitation {
  id          String    @id @default(cuid())
  email       String    @unique
  description String?
  token       String    @unique
  category    String
  expires     DateTime?
  companyId   String?
  userId      String    @unique
  user        User?     @relation(fields: [userId], references: [id])
  company     Company?  @relation(fields: [companyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum TeamCategory {
  EMPLOYEE
  CONTRACTOR
}

enum Currency {
  NGN
  KES
  RWF
  UGX
  TZS
  ZMW
  ZAR
  GHS
  USD
  EUR
  GBP
}

model Team {
  id            String        @id @default(cuid())
  email         String        @unique
  firstName     String?
  lastName      String?
  phone         String?
  country       String?
  department    String
  jobRole       String
  salary        String
  signBonus     String
  status        Boolean?      @default(true)
  teamCategory  TeamCategory  @default(EMPLOYEE)
  payrollMethod PayrollMethod @default(BANK)
  bank          Bank?
  expense       Expense?
  cryptoWallet  CryptoWallet?
  mobileMoney   MobileMoney?
  payrolls      Payroll[]     @relation("TeamPayroll")
}

model Payroll {
  id        String   @id @default(cuid())
  suspend   Boolean  @default(false)
  currency  Currency @default(NGN)
  title     String
  cycle     String
  payday    DateTime
  auto      Boolean
  burden    Int
  employees Team[]   @relation("TeamPayroll")
}

enum ExpenseCategory {
  Reimbursement
  Payment
}

enum ExpenseStatus {
  Approved
  Pending
  Disapproved
}

enum PaymentMethod {
  Bank_Transfer
  Crypto
  Mobile_Money
}

model ExpenseAttachment {
  id        String   @id @default(cuid())
  expenseId String   @unique
  expense   Expense? @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  title     String
  url       String
}

model Expense {
  id          String             @id @default(cuid())
  date        DateTime
  method      PaymentMethod?     @default(Bank_Transfer)
  description String
  type        ExpenseCategory    @default(Payment)
  status      ExpenseStatus
  attachment  ExpenseAttachment?
  amount      String
  employeeId  String             @unique
  employee    Team               @relation(fields: [employeeId], references: [id])
}

model CryptoWallet {
  id          String @id @default(cuid())
  currency    String
  address     String
  network     String
  allocation  Int
  personnelId String @unique
  personnel   Team?  @relation(fields: [personnelId], references: [id], onDelete: Cascade)
}

model Bank {
  id            String @id @default(cuid())
  name          String
  accountNumber String
  bankCode      String
  country       String
  swiftCode     String
  routingNumber String
  accountType   String
  allocation    Int
  personnelId   String @unique
  personnel     Team?  @relation(fields: [personnelId], references: [id], onDelete: Cascade)
}

model MobileMoney {
  id          String @id @default(cuid())
  provider    String
  phoneNumber String
  allocation  Int
  personnelId String @unique
  personnel   Team?  @relation(fields: [personnelId], references: [id], onDelete: Cascade)
}

enum PaymentLinkStatus {
  ACTIVE
  INACTIVE
}

enum PaymentLinkType {
  PUBLIC
  PRIVATE
}

model PaymentLink {
  id                String             @id @default(cuid())
  amount            Int
  description       String?
  type              PaymentLinkType?   @default(PUBLIC)
  password          String?
  encryptedPassword String?
  currency          Currency?          @default(NGN)
  status            PaymentLinkStatus? @default(ACTIVE)
  linkId            String             @unique
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?
  // wyreRequest       WyreRequest[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model WyreRequest {
  id                     String   @id @default(cuid())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  // link                   PaymentLink?  @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId                 String?
  amount                 Int?
  requesterEmail         String?
  requesterPhoneNumber   String?
  requesterAccountNumber String?
  bankName               String?
  requesterName          String?
  reference              String?
  to                     String?
  user                   User?    @relation(fields: [to], references: [id], onDelete: Cascade)
  status                 String?  @default("PENDING")
  description            String?
}

enum TransactionCategory {
  EXPENSE
  PAYROLL
}

model Transaction {
  id            String              @id @default(cuid())
  attempts      Int?                @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  currency      String?             @default("NGN")
  status        String?             @default("PENDING")
  category      TransactionCategory @default(PAYROLL)
  amount        Int?
  provider      String?
  categoryRefId String?
}
